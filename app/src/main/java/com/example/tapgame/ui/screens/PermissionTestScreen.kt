package com.example.tapgame.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.tapgame.ui.screens.overlay.OverlayManager
import com.example.tapgame.server.MyPersistentServer

@Composable
fun PermissionTestScreen() {
    var testResult by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    val context = LocalContext.current
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "üß™ –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )
        
        Button(
            onClick = {
                isLoading = true
                testResult = runPermissionTests()
                isLoading = false
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(20.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Button(
            onClick = {
                if (OverlayManager.hasOverlayPermission(context)) {
                    OverlayManager.startOverlay(context)
                } else {
                    OverlayManager.requestOverlayPermission(context)
                }
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("üß™ –¢–µ—Å—Ç –æ–≤–µ—Ä–ª–µ—è")
        }
        
        if (testResult.isNotEmpty()) {
            Text(
                text = testResult,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(top = 16.dp)
            )
        }
    }
}

private fun runPermissionTests(): String {
    return try {
        val server = MyPersistentServer.getInstance()
        val result = StringBuilder()
        
        result.append("üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π TapGame:\n\n")
        
        result.append("üñ•Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ${if (server != null) "‚úÖ" else "‚ùå"}\n")
        
        if (server != null) {
            result.append("üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ: ${if (server.isPermissionActive()) "‚úÖ" else "‚ùå"}\n")
            result.append("üéØ –û–≤–µ—Ä–ª–µ–π: ${if (server.canShowOverlay()) "‚úÖ" else "‚ùå"}\n")
            result.append("üñ±Ô∏è –ò–Ω—ä–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞: ${if (server.canInjectInput()) "‚úÖ" else "‚ùå"}\n")
            result.append("üì∏ –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞: ${if (server.canCaptureScreen()) "‚úÖ" else "‚ùå"}\n")
            result.append("ü™ü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏: ${if (server.canControlWindows()) "‚úÖ" else "‚ùå"}\n")
        }
        
        result.toString()
    } catch (e: Exception) {
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e.message}"
    }
}