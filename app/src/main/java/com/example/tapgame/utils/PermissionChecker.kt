// utils/PermissionChecker.kt

package com.example.tapgame.utils

import android.content.Context
import android.util.Log
import com.example.tapgame.data.SettingsDataStore
import com.example.tapgame.server.MyPersistentServer
import kotlinx.coroutines.delay
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.withContext
import moe.shizuku.manager.adb.AdbClient
import moe.shizuku.manager.adb.AdbKey
import moe.shizuku.manager.adb.PreferenceAdbKeyStore
import java.net.ConnectException

object PermissionChecker {

    // –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É: —Ç–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.
    // –û–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ ADB-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ Wi-Fi –æ—Ç–ª–∞–¥–∫–∏.
    suspend fun isPermissionSaved(context: Context): Boolean = withContext(Dispatchers.IO) {
        val settingsDataStore = SettingsDataStore(context)
        val isAdbPaired = settingsDataStore.isAdbPairedFlow.first()

        if (isAdbPaired) {
            Log.d("PermissionChecker", "ADB paired status: true. Permission is considered saved.")
            return@withContext true
        } else {
            Log.d("PermissionChecker", "ADB paired status: false. Permission is not saved.")
            return@withContext false
        }
    }
    suspend fun isPermissionActive(context: Context): Boolean = withContext(Dispatchers.IO) {
        val settingsDataStore = SettingsDataStore(context)
        val isAdbPaired = settingsDataStore.isAdbPairedFlow.first()
    
        if (!isAdbPaired) {
            Log.d("PermissionChecker", "ADB not paired, active permission check skipped.")
            return@withContext false
        }
    
        val adbConnectPort = settingsDataStore.adbConnectPortFlow.first()
        if (adbConnectPort == -1) {
            Log.d("PermissionChecker", "ADB connect port not found, active permission check skipped.")
            return@withContext false
        }

        try {
            val keyStore = PreferenceAdbKeyStore(context.getSharedPreferences("adb_key", Context.MODE_PRIVATE))
            val key = AdbKey(keyStore, "TapGameKey")
    
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            delay(1000)
    
            val localIp = NetworkUtils.getLocalIpAddress(context) ?: run {
                Log.w("PermissionChecker", "Failed to get local IP, using fallback")
                "127.0.0.1"
            }
            
            Log.d("PermissionChecker", "Checking active permission with IP: $localIp, port: $adbConnectPort")
    
            val adbClient = AdbClient(localIp, adbConnectPort, key)
            adbClient.connect()
    
            val result = adbClient.shell("echo hello")
            adbClient.close()
    
            val isActive = result.trim() == "hello"
            Log.d("PermissionChecker", "ADB connection test result: $isActive, shell output: \"$result\"")
            isActive
        } catch (e: ConnectException) {
            Log.w("PermissionChecker", "ConnectException: ADB server not reachable or connection refused. Active permission not found.")
            false
        } catch (e: Exception) {
            Log.e("PermissionChecker", "Error checking active permission via ADB client", e)
            false
        }
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ TapGame (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ WiFi –æ—Ç–ª–∞–¥–∫–∏)
    suspend fun isTapGameServerActive(context: Context): Boolean = withContext(Dispatchers.IO) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
            val isRunning = MyPersistentServer.isServerRunning()
            if (!isRunning) {
                Log.d("PermissionChecker", "TapGame server is not running")
                return@withContext false
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
            val server = MyPersistentServer.getInstance()
            if (server == null) {
                Log.d("PermissionChecker", "TapGame server instance is null")
                return@withContext false
            }
            
            val isActive = server.isPermissionActive()
            Log.d("PermissionChecker", "TapGame server active: $isActive")
            isActive
        } catch (e: Exception) {
            Log.e("PermissionChecker", "Error checking TapGame server", e)
            false
        }
    }

    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    suspend fun checkAllPermissions(context: Context): String = withContext(Dispatchers.IO) {
        val settingsDataStore = SettingsDataStore(context)
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        val isSaved = settingsDataStore.isAdbPairedFlow.first()
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ ADB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ WiFi –æ—Ç–ª–∞–¥–∫–µ)
        val isAdbActive = try {
            isPermissionActive(context)
        } catch (e: Exception) {
            false
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞)
        val isServerActive = try {
            isTapGameServerActive(context)
        } catch (e: Exception) {
            false
        }
        
        val status = """
            üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${if (isSaved) "‚úÖ" else "‚ùå"}
            üîó ADB –∞–∫—Ç–∏–≤–µ–Ω: ${if (isAdbActive) "‚úÖ" else "‚ùå"}
            üñ•Ô∏è –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω: ${if (isServerActive) "‚úÖ" else "‚ùå"}
            
            ${if (isServerActive) "üéâ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!" else "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"}
        """.trimIndent()
        
        Log.d("PermissionChecker", "All permissions check:\n$status")
        status
    }
}
